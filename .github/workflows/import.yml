name: DockerHub to Quay backup

on: workflow_dispatch

env:
 IMAGES: |
   docker.io/ubuntu:24.04
   docker.io/ubuntu:22.04
   docker.io/alpine:3.16
   docker.io/alpine:3.17
   docker.io/apachepulsar/pulsar:3.0.0
   docker.io/apachepulsar/pulsar:3.2.4
   docker.io/axllent/mailpit:latest
   docker.io/grafana/otel-lgtm:0.4.0
   docker.io/grafana/otel-lgtm:latest
   docker.io/library/redis:5.0.8-alpine
   docker.io/mariadb:10.11
   docker.io/mongo:4.4
   docker.io/mongo:7.0
   docker.io/mongo:latest
   docker.io/mysql:8.0
   docker.io/mysql:8.4
   docker.io/postgres:14
   docker.io/postgres:17
   docker.io/postgres:latest
   docker.io/rabbitmq:3.12-management
   docker.io/reachfive/fake-smtp-server:latest
   docker.io/redis:5.0.8-alpine
   docker.io/redis:7
   docker.io/redis:latest
   docker.io/vectorized/redpanda:latest
   docker.io/vectorized/redpanda:v22.3.4
   docker.io/vectorized/redpanda:v24.1.2

jobs:
  import-containers:
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Run Import Script
      env:
        KARM_QUAY_API_TOKEN: ${{ secrets.KARM_QUAY_API_TOKEN }}
      run: |
        mkdir ~/.docker -p
        tee ~/.docker/config.json <<-EOX
        {
            "auths": {
                "quay.io": {
                    "auth": "${KARM_QUAY_API_TOKEN}"
                }
            }
        }
        EOX

        quay_user="karmkarm"
        images=($IMAGES)

        if [[ "${{ matrix.os }}" =~ arm ]]; then
          arch_suffix="arm64"
        else
          arch_suffix="amd64"
        fi
        for image in "${images[@]}"; do
          tag=$(echo $image | cut -d':' -f2)
          new_image="quay.io/$quay_user/$(echo $image | cut -d'/' -f2- | cut -d':' -f1):$tag"
          echo "Pulling $image..."
          docker pull $image || { echo "Failed to pull $image"; continue; }
          echo "Tagging $image to $new_image-$arch_suffix..."
          docker tag $image $new_image-$arch_suffix || { echo "Failed to tag image"; continue; }
          echo "Pushing $new_image-$arch_suffix to Quay.io..."
          docker push $new_image-$arch_suffix || { echo "Failed to push $new_image"; continue; }
          echo "--------------------"
        done

  create-manifest:
    needs: import-containers
    runs-on: ubuntu-22.04

    steps:
      env:
        KARM_QUAY_API_TOKEN: ${{ secrets.KARM_QUAY_API_TOKEN }}
      run: |
        mkdir ~/.docker -p
        tee ~/.docker/config.json <<-EOX
        {
            "auths": {
                "quay.io": {
                    "auth": "${KARM_QUAY_API_TOKEN}"
                }
            }
        }
        EOX

        quay_user="karmkarm"
        images=($IMAGES)

        for image in "${images[@]}"; do
          tag=$(echo $image | cut -d':' -f2)
          base_name=$(echo $image | cut -d'/' -f2- | cut -d':' -f1)
          manifest_name="quay.io/$quay_user/$base_name:$tag"

          echo "Pulling images for manifest..."
          docker pull quay.io/$quay_user/$base_name:$tag-amd64
          docker pull quay.io/$quay_user/$base_name:$tag-arm64

          echo "Creating manifest for $manifest_name..."
          docker manifest create $manifest_name
          docker manifest add $manifest_name quay.io/$quay_user/$base_name:$tag-arm64
          docker manifest add $manifest_name quay.io/$quay_user/$base_name:$tag-amd64

          echo "Pushing manifest for $manifest_name..."
          docker manifest push $manifest_name docker://$manifest_name

          echo "--------------------"
        done
